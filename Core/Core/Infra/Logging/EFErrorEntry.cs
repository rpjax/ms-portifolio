using ModularSystem.EntityFramework;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ModularSystem.Core.Logging;

/// <summary>
/// Represents an error entry that can be logged and stored in an Entity Framework context. <br/>
/// Inherits from <see cref="Error"/> and implements <see cref="IEFEntity"/> for database storage.
/// </summary>
public class ErrorEntry : IEFEntity
{
    /// <summary>
    /// Gets or sets the unique long integer identifier for the model. This identifier is automatically generated by the database upon insertion.
    /// </summary>
    [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public long Id { get; set; }

    /// <inheritdoc/>
    public bool IsSoftDeleted { get; set; }

    /// <inheritdoc/>
    public DateTime CreatedAt { get; set; }

    /// <inheritdoc/>
    public DateTime LastModifiedAt { get; set; }

    /// <summary>
    /// Gets or sets the descriptive text of the error. This field can provide a human-readable explanation of the error.
    /// </summary>
    public string? Text { get; set; }

    /// <summary>
    /// Gets or sets the identifier used to bind this error to its source. <br/>
    /// This can be used to specify where or what part of the system the error originated from.
    /// </summary>
    public string? Source { get; set; }

    /// <summary>
    /// Gets or sets a code meant for tracking or categorizing the error. <br/>
    /// This can be useful for error classification or internationalization purposes.
    /// </summary>
    public string? Code { get; set; }

    /// <summary>
    /// Gets or sets a list of flags associated with this operation error. <br/>
    /// Flags can be used to convey additional context about the error, such as its severity or visibility.
    /// </summary>
    public List<ErrorEntryFlag> Flags { get; set; } = new(0);

    /// <summary>
    /// Gets or sets a list of key-value-pair details associated with this error. <br/>
    /// This property is designed for human-readable messages that provide additional context about the error.
    /// </summary>
    public List<KeyValue<string, string>> Details { get; set; } = new(0);

    /// <summary>
    /// Gets or sets a list of key-value-pair data associated with this error,  <br/>
    /// designed for additional data about the error, including JSON or encoded binary data.
    /// </summary>
    public List<KeyValue<string, string>> Data { get; set; } = new(0);

    /// <summary>
    /// Gets or sets the serialized representation of the exception. 
    /// This property stores the serialized form of an exception object for detailed error reporting. <br/>
    /// It is not directly mapped to the database but instead, its value exists inside the <see cref="Data"/> list with "exception" as the key.
    /// </summary>
    /// <remarks>
    /// This property is useful for persisting detailed exception information, 
    /// which can be deserialized back into an <see cref="Exception"/> object when needed. <br/>
    /// Utilizing this property allows for comprehensive error logging while maintaining a structured approach to error data storage.
    /// </remarks>
    [NotMapped]
    public string? SerializedException
    {
        get => GetData(Error.ExceptionDataKey);
        set => SetData(Error.ExceptionDataKey, value);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ErrorEntry"/> class with default properties.
    /// </summary>
    [JsonConstructor]
    public ErrorEntry()
    {
        CreatedAt = TimeProvider.UtcNow();
        LastModifiedAt = TimeProvider.UtcNow();
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ErrorEntry"/> class using an <see cref="Error"/> object.
    /// </summary>
    /// <param name="error">The <see cref="Error"/> object to initialize the <see cref="ErrorEntry"/> from.</param>
    /// <remarks>
    /// This constructor creates an <see cref="ErrorEntry"/> by copying the properties of the provided <see cref="Error"/> object.
    /// </remarks>
    public ErrorEntry(Error error)
    {
        CreatedAt = TimeProvider.UtcNow();
        LastModifiedAt = TimeProvider.UtcNow();
        Text = error.Text;
        Source = error.Source;
        Code = error.Code;

        Flags = error.Flags
            .Transform(x => new ErrorEntryFlag(x))
            .ToList();

        Details = error.Details
            .Transform(x => new KeyValue<string, string>(x.Key, x.Value))
            .ToList();

        Data = error.DebugData
            .Transform(x => new KeyValue<string, string>(x.Key, x.Value))
            .ToList();
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ErrorEntry"/> class using an <see cref="Exception"/> object.
    /// </summary>
    /// <param name="exception">The exception to initialize the <see cref="ErrorEntry"/> from.</param>
    /// <param name="code">Optional error code associated with the exception.</param>
    /// <param name="flags">Optional flags to classify the error.</param>
    /// <remarks>
    /// This constructor creates an <see cref="ErrorEntry"/> by extracting information from the provided exception.
    /// <br/>
    /// The exception is serialized to a JSON string for detailed error reporting.
    /// </remarks>
    public ErrorEntry(Exception exception, string? code = null, params string[] flags)
    {
        CreatedAt = TimeProvider.UtcNow();
        LastModifiedAt = TimeProvider.UtcNow();
        Text = exception.Message;
        Source = exception.Source;
        Code = code;
        SerializedException = Serialize(exception);
        AddFlags(flags);
    }

    /// <summary>
    /// Creates an <see cref="ErrorEntry"/> from an <see cref="Exception"/>, specifying the time of occurrence and additional parameters.
    /// </summary>
    /// <param name="exception">The exception to base the <see cref="ErrorEntry"/> on.</param>
    /// <param name="occurredAt">The date and time when the error occurred.</param>
    /// <param name="code">Optional error code associated with the exception.</param>
    /// <param name="flags">Optional flags to classify the error.</param>
    /// <returns>A new instance of <see cref="ErrorEntry"/> initialized from the exception.</returns>
    /// <remarks>
    /// This static method provides a convenient way to create an <see cref="ErrorEntry"/> with the time of occurrence and additional parameters like code and flags.
    /// </remarks>
    public static ErrorEntry From(
        Exception exception,
        DateTime occurredAt,
        string? code = null,
        params string[] flags)
    {
        return new ErrorEntry(exception, code, flags)
        {
            CreatedAt = occurredAt,
        };
    }

    /// <summary>
    /// Serializes a given exception to its string representation.
    /// </summary>
    /// <param name="exception">The exception to be serialized.</param>
    /// <returns>A serialized string representation of the exception.</returns>
    private static string Serialize(Exception exception)
    {
        var settings = new JsonSerializerSettings
        {
            ContractResolver = new InternalContractResolver()
        };

        return JsonConvert.SerializeObject(exception, settings);
    }

    /// <summary>
    /// Deserializes a given serialized exception back into its <see cref="Exception"/> object.
    /// </summary>
    /// <param name="serializedException">The serialized exception string.</param>
    /// <returns>The deserialized <see cref="Exception"/> object, or null if the input string is null.</returns>
    private static Exception? Deserialize(string? serializedException)
    {
        if (serializedException == null)
        {
            return null;
        }

        var settings = new JsonSerializerSettings
        {
            ContractResolver = new InternalContractResolver()
        };

        return JsonConvert.DeserializeObject<Exception>(serializedException, settings);
    }

    /// <inheritdoc/>
    public bool Equals(IEntity? other)
    {
        return other?.GetId() == GetId();
    }

    /// <inheritdoc/>
    public string GetId()
    {
        return Id.ToString();
    }

    /// <inheritdoc/>
    public void SetId(string id)
    {
        Id = long.Parse(id);
    }

    /// <summary>
    /// Retrieves the value associated with a specified key in the error's data collection.
    /// </summary>
    /// <param name="key">The key for the data to retrieve.</param>
    /// <returns>The value associated with the specified key, or null if the key is not found.</returns>
    public string? GetData(string key)
    {
        foreach (var item in Data)
        {
            if (item.Key == key)
            {
                return item.Value;
            }
        }
        
        return null;
    }

    /// <summary>
    /// Sets or updates the value associated with a specified key in the error's data collection.
    /// </summary>
    /// <param name="key">The key for the data to set or update.</param>
    /// <param name="value">The value to set. If null, no action is taken.</param>
    /// <returns>The current <see cref="Error"/> instance with the updated data.</returns>
    public ErrorEntry SetData(string key, string? value)
    {
        if (value == null)
        {
            return this;
        }

        Data = Data.RemoveWhere(x => x.Key == key);
        Data.Add(new(key, value));
        return this;
    }

    /// <summary>
    /// Adds additional flags to the error.
    /// </summary>
    /// <param name="flags">The flags to add to the error.</param>
    /// <returns>The <see cref="Error"/> instance with the added flags.</returns>
    public ErrorEntry AddFlags(params string[] flags)
    {
        foreach (var item in flags)
        {
            if (Flags.Any(x => x.Value == item))
            {
                continue;
            }

            Flags.Add(new(item));
        }

        return this;
    }

    /// <summary>
    /// Deserializes the <see cref="SerializedException"/> property back into its <see cref="Exception"/> object.
    /// </summary>
    /// <returns>The deserialized <see cref="Exception"/> object, or null if <see cref="SerializedException"/> is null.</returns>
    public Exception? DeserializeException()
    {
        return Deserialize(SerializedException);
    }

    /// <summary>
    /// Gets the <see cref="Exception"/> stored in this entry.
    /// </summary>
    /// <returns></returns>
    /// <exception cref="ArgumentException"></exception>
    public Exception GetException()
    {
        if (SerializedException == null)
        {
            throw new ArgumentException("Cannot get exception from entry with null serialized exception data.", nameof(SerializedException));
        }

        return Deserialize(SerializedException)!;
    }

    /// <summary>
    /// Represents a contract resolver for JSON serialization and deserialization operations specific to exceptions.
    /// </summary>
    /// <remarks>
    /// The primary intent of this resolver is to filter out certain properties from the serialization process,
    /// such as the <see cref="Exception.TargetSite"/>.
    /// </remarks>
    internal class InternalContractResolver : DefaultContractResolver
    {
        protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization)
        {
            var ignoreProps = new string[]
            {
                nameof(Exception.TargetSite)
            };

            var props = base.CreateProperties(type, memberSerialization);

            return props.Where(p => !ignoreProps.Contains(p.PropertyName)).ToList();
        }
    }

}

/// <summary>
/// Represents a flag associated with an <see cref="ErrorEntry"/>. <br/>
/// Flags are used to categorize or provide additional context to an error.
/// </summary>
public class ErrorEntryFlag
{
    /// <summary>
    /// Gets or sets the value of the flag.
    /// </summary>
    public string Value { get; set; }

    /// <summary>
    /// Initializes a new instance of the <see cref="ErrorEntryFlag"/> class.
    /// </summary>
    /// <param name="value">The value of the flag.</param>
    public ErrorEntryFlag(string value)
    {
        Value = value;
    }
}

