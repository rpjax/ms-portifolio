using ModularSystem.Core;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ModularSystem.EntityFramework;

/// <summary>
/// Represents a model designed for Entity Framework storage, with querying capabilities and identifiable by a long integer.
/// </summary>
/// <remarks>
/// Extends <see cref="IQueryableModel"/> to provide Entity Framework-specific identifier properties. 
/// </remarks>
public interface IEFModel : IQueryableModel
{
    /// <summary>
    /// Gets the unique long integer identifier associated with the model for Entity Framework storage.
    /// </summary>
    long Id { get; }
}

/// <summary>
/// Represents an abstract base class for models designed for Entity Framework, providing querying capabilities and a long integer identifier.
/// </summary>
/// <remarks>
/// This class builds upon the <see cref="QueryableModel"/> and introduces an Entity Framework standard <c>Id</c> field 
/// as the primary key, facilitating database operations.
/// </remarks>
public abstract class EFModel : QueryableModel, IEFModel
{
    /// <summary>
    /// Gets or sets the unique long integer identifier for the model. This identifier is automatically generated by the database upon insertion.
    /// </summary>
    [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public long Id { get; set; }

    /// <summary>
    /// Retrieves the unique identifier of the model as a string representation of the <c>Id</c>.
    /// </summary>
    /// <returns>The string representation of the <c>Id</c>.</returns>
    public override string GetId()
    {
        return Id.ToString();
    }

    /// <summary>
    /// Sets the unique identifier of the model using a string representation of a long integer.
    /// </summary>
    /// <param name="id">The string representation of the long integer identifier to be set.</param>
    public override void SetId(string id)
    {
        Id = long.Parse(id);
    }
}
