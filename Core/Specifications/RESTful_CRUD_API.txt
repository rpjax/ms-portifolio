## Syntax:
## Comments: "## ..."
## Placeholder declaration: "{place holder description}"

## Parameter declaration: "type: name"
## Parameter with type parameter declaration: "type<T>: name"
## Nullable parameter declaration: "type?: name"

## Data structure declaration: "@name{ body }"
## Data structure reference: "@name"
## Unknown data structure declaration: "@name { EXTERN }"

## JSON value declaration: "JSON({data structure})"

Modular System Specifications:
## Data structures

@Resource 
{ 
	EXTERN 
}

@Error
{
	EXTERN
}

@Pagination
{
	int64: limit,
	int64: offset,
	int64: total
}

@QueryResult
{
	@Pagination: pagination,
	@Array<@Resource>: data
}

# RESTful CRUD API
	# Resource Creation: 
		# verb => POST
		# pattern => api/{resource name} 
		# payload => resource 
		# response => JSON({ value: string })
			- The 'value' is the ID from the created resource.
	# Resource Read: 
		# verb => GET 
		# pattern => api/{resource name} 
		# params => { string: id }
		# response => JSON(@Resource)
	# Resource Query: 
		# verb => GET 
		# pattern => api/{resource name}/query 
		# params => { int64: limit, int64: offset, string?: filter, string?: sort, int32?: order }
		# response => JSON(@QueryResult)
	# Resource Update:
		# verb => PUT
		# patter => api/{resource name}
		# payload => resource 
	# Resource Deletion:
		# verb: DELETE
		# pattern: api/{resource name}
		# params: => { string: id }
	# ID Validation:
		# verb: => GET
		# pattern => api/{resource name}/id-validation
		# params => { string: id }
		# response => JSON({ value: boolean })
	# Ping the Resource
		# verb: => GET
		# pattern => api/{resource name}/ping

	# On Error:
		# response => JSON(@Error)