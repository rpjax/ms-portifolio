(*
    This file defines the grammar for the WebQL language v2.
    - Created by Rodrigo Jacques.

    # Glossary:
    - 'epsilon' represents the empty sequence.
    - 'S' is the start symbol of the grammar.
*)

(* Important symbols *)
epsilon = "";

S = unary_lambda | epsilon;

(* Primitive symbols *)
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

digit_sequence = digit , { digit };

sign = "+" | "-" | epsilon;

int = sign , digit_sequence ;

float = sign , digit_sequence , "." , digit_sequence ;

number = int | float ;

bool = "true" | "false" ;

(* <string> and <char> definitions *)
char = ? any valid character ? ;
string = '"' , { char } , '"' ;

reference = string ;

destination = reference ;

type = string ;

literal = string | number | bool | null ;


(*
	 argument symbols
*)

arg ::= reference | object 

<query_arg> ::= <arg>

<arg_array> ::= '[' [ <arg> ] { ',' <arg> } ']'

<unary_args> ::= '[' <destination> ',' <arg> ']'

<binary_args> ::= '[' <destination> ',' <arg> ',' <arg> ']'

<array-args> ::= '[' <destination> ',' <arg-array> ']'

<lambda-args> ::= '[' [ <string> ] { ',' <string> } ']'

<unary-lambda-args> ::= '[' <string> ']'

<projection-object> ::= '{' [ <projection-prop> ] { <projection-prop> } '}'
<projection-prop> ::= <projection-prop-name> ':' <projection-prop-value>
<projection-prop-name> ::= <string>
<projection-prop-value> ::= <reference> | <projection-object>

//*
//* lambdas
//*

<lambda> ::= '[' <lambda-args> ',' <object> ']'

<unary-lambda> ::= '[' <unary-lambda-args> ',' <object> ']'

<projection-lambda> ::= '[' <lambda-args> ',' <projection-object> ']'

//*
// The object and expression productions.
//*

<object> ::= '{' <expr_sequence> '}'

<expr_sequence> ::= [ <expr> ] { ',' <expr> }

<expr> ::= <arithmetic-expr> 
	| <relational-expr> 
	| <pattern-expr> 
	| <logical-expr> 
	| <semantic-expr> 
	| <query-expr> 
	| <aggregation-expr>

//*
// Arithmetic expressions.
//*

<arithmetic-expr> ::= <add-expr> | <subtract-expr> | <divide-expr> | <multiply-expr> | <modulo-expr>

<add-expr> ::= <add-op> <binary-args>  

<subtract-expr> ::= <subtract-op> <binary-args> 

<divide-expr> ::= <divide-op> <binary-args> 

<multiply-expr> ::= <multiply-op> <binary-args> 

<modulo-expr> ::= <modulo-op> <binary-args> 

//*
// Relational expressions.
//*

<relational-expr> ::= <equal-expr> | <not-equal-expr> | <less-expr> | <less-equal-expr> | <greater-expr> | <greater-equal-expr>

<equal-expr> ::= <equal-op> <binary-args> 

<not-equal-expr> ::= <not-equal-op> <binary-args> 

<less-expr> ::= <less-op> <binary-args> 

<less-equal-expr> ::= <less-equal-op> <binary-args> 

<greater-expr> ::= <greater-op> <binary-args> 

<greater-equal-expr> ::= <greater-equal-op> <binary-args> 

//*
// Patern match expressions.
//*

<pattern-expr> ::= <like-expr> | <regex-expr>

<like-expr> ::= <like-op> <binary-args> 

<regex-expr> ::= <regex-op> <binary-args> 
<regex-args> ::= '[' <string-literal> ',' <arg> ',' <destination> ']'

//*
// Logical expressions.
//*

<logical-expr> ::= <or-expr> | <and-expr> | <not-expr>

<or-expr> ::= <or-op> <array-args>

<and-expr> ::= <and-op> <array-args>

<not-expr> ::= <not-op> <unary-args>

//*
// Semantic expressions.
//*

<semantic-expr> ::= <literal-expr> | <expr-expr> | <select-expr> | <return-expr> 

<literal-expr> ::= <literal-op> <literal-args>
<literal-args> ::= '[' <type> ',' <literal> ']'

<expr-expr> ::= <expr-op> <array-args>

<select-expr> ::= <select-op> <unary-args>

<return-expr> ::= <return-op> <reference>

//*
// query expressions
//*

<query-expr> ::= <filter-expr> | <projection-expr> | <transform-expr> | <limit-expr> | <skip-expr> 

<filter-expr> ::= <filter-op> <filter-args>
<filter-args> ::= '[' <destination> ',' <query-arg> ',' <lambda> ']'

<projection-expr> ::= <projection-op> <projection-args>
<projection-args> ::= '[' <destination> ',' <query-arg> ',' <projection-lambda> ']'

<transform-expr> ::= <transform-op> <transform-args>
<transform-args> ::= '[' <destination> ',' <query-arg> ',' <lambda> ']'

<limit-expr> ::= <limit-op> <limit-args>
<limit-args> ::= '[' <destination> ',' <query-arg> ',' <int32> ']'

<skip-expr> ::= <skip-op> <skip-args>
<skip-args> ::= '[' <destination> ',' <query-arg> ',' <int32> ']'

//*
// aggregation expressions
//*

<aggregation-expr> ::= <any-expr> | <all-expr> | <count-expr> | <min-expr> | <max-expr> | <sum-expr> | <average-expr>

<any-expr> ::= <any-op> <any-args>
<any-args> ::= '[' <destination> ',' <query-arg> ',' <lambda> ']'

<all-expr> ::= <all-op> <all-args>
<all-args> ::= '[' <destination> ',' <query-arg> ',' <lambda> ']'

<count-expr> ::= <count-op> <count-args>
<count-args> ::= '[' <destination> ',' <query-arg> ']'

<min-expr> ::= <min-op> <min-args>
<min-args> ::= '[' <destination> ',' <query-arg> ',' <lambda> ']'

<max-expr> ::= <max-op> <max-args>
<max-args> ::= '[' <destination> ',' <query-arg> ',' <lambda> ']'

<sum-expr> ::= <sum-op> <sum-args>
<sum-args> ::= '[' <destination> ',' <query-arg> ']'

<average-expr> ::= <average-op> <average-args>
<average-args> ::= '[' <destination> ',' <query-arg> ',' <lambda> ']'

