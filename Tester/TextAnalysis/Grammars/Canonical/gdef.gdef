// <lexer>

// use standard;
// use csharp;

// lexeme hex_number '[0-9a-fA-F]+' ;
// lexeme string '"[^"]*"|\'[^\']*\'' ;

// </lexer>

grammar 
    : [ lexer_settings ] production_list 
    ;

lexer_settings
    : '<lexer>' { lexer_statement } '</lexer>'
    ;

lexer_statement
    : 'use' $id ';'
    | 'lexeme' $id regex ';'
    ;

regex
    : $string
    ;

production_list
    : production { production }
    ;

production
    : $id ':' production_body ';'
    ;

production_body
    : symbol { symbol } [ semantic_action ]
    ;

symbol
    : terminal
    | non_terminal
    | macro
    ;

terminal 
    : $string
    | lexeme
    | epsilon
    ;

non_terminal
    : $id
    ;

epsilon
    : 'Îµ'
    ;

macro
    : group
    | option
    | repetition
    | alternative
    ;

group
    : '(' symbol { symbol } ')'
    ;

option
    : '[' symbol { symbol } ']'
    ;

repetition
    : '{' symbol { symbol } '}'
    ;

alternative
    : '|'
    ;

lexeme
    : '$' $id 
    ;

semantic_action
    : '=>' action_block
    ;

action_block
	: '{' semantic_statement { ',' semantic_statement } '}'
	;

semantic_statement
    : reduction 
    | assignment
    ;

reduction
	: '$' ':' expression
	;

assignment
	: $id ':' expression
	;

expression 
    : literal
    | reference
    | index_expression
    | function_call
    | expression '.' function_call
    ;

literal
    : $string
    | $int
    | $float
    ;

reference 
	: $id
	;

index_expression
	: '[' $int ']'
	;

function_call
    : $id '(' [ parameter_list ] ')'
	;

parameter_list
	: parameter { ',' parameter }
	;

parameter
	: $id 
	;
